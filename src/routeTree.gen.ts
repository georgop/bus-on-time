/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as VehiclesRouteImport } from './routes/vehicles'
import { Route as TermsRouteImport } from './routes/terms'
import { Route as ServicesRouteImport } from './routes/services'
import { Route as PricesRouteImport } from './routes/prices'
import { Route as DestinationsRouteImport } from './routes/destinations'
import { Route as ContactRouteImport } from './routes/contact'
import { Route as IndexRouteImport } from './routes/index'

const VehiclesRoute = VehiclesRouteImport.update({
  id: '/vehicles',
  path: '/vehicles',
  getParentRoute: () => rootRouteImport,
} as any)
const TermsRoute = TermsRouteImport.update({
  id: '/terms',
  path: '/terms',
  getParentRoute: () => rootRouteImport,
} as any)
const ServicesRoute = ServicesRouteImport.update({
  id: '/services',
  path: '/services',
  getParentRoute: () => rootRouteImport,
} as any)
const PricesRoute = PricesRouteImport.update({
  id: '/prices',
  path: '/prices',
  getParentRoute: () => rootRouteImport,
} as any)
const DestinationsRoute = DestinationsRouteImport.update({
  id: '/destinations',
  path: '/destinations',
  getParentRoute: () => rootRouteImport,
} as any)
const ContactRoute = ContactRouteImport.update({
  id: '/contact',
  path: '/contact',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/contact': typeof ContactRoute
  '/destinations': typeof DestinationsRoute
  '/prices': typeof PricesRoute
  '/services': typeof ServicesRoute
  '/terms': typeof TermsRoute
  '/vehicles': typeof VehiclesRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/contact': typeof ContactRoute
  '/destinations': typeof DestinationsRoute
  '/prices': typeof PricesRoute
  '/services': typeof ServicesRoute
  '/terms': typeof TermsRoute
  '/vehicles': typeof VehiclesRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/contact': typeof ContactRoute
  '/destinations': typeof DestinationsRoute
  '/prices': typeof PricesRoute
  '/services': typeof ServicesRoute
  '/terms': typeof TermsRoute
  '/vehicles': typeof VehiclesRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/contact'
    | '/destinations'
    | '/prices'
    | '/services'
    | '/terms'
    | '/vehicles'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/contact'
    | '/destinations'
    | '/prices'
    | '/services'
    | '/terms'
    | '/vehicles'
  id:
    | '__root__'
    | '/'
    | '/contact'
    | '/destinations'
    | '/prices'
    | '/services'
    | '/terms'
    | '/vehicles'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ContactRoute: typeof ContactRoute
  DestinationsRoute: typeof DestinationsRoute
  PricesRoute: typeof PricesRoute
  ServicesRoute: typeof ServicesRoute
  TermsRoute: typeof TermsRoute
  VehiclesRoute: typeof VehiclesRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/vehicles': {
      id: '/vehicles'
      path: '/vehicles'
      fullPath: '/vehicles'
      preLoaderRoute: typeof VehiclesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/terms': {
      id: '/terms'
      path: '/terms'
      fullPath: '/terms'
      preLoaderRoute: typeof TermsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/services': {
      id: '/services'
      path: '/services'
      fullPath: '/services'
      preLoaderRoute: typeof ServicesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/prices': {
      id: '/prices'
      path: '/prices'
      fullPath: '/prices'
      preLoaderRoute: typeof PricesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/destinations': {
      id: '/destinations'
      path: '/destinations'
      fullPath: '/destinations'
      preLoaderRoute: typeof DestinationsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/contact': {
      id: '/contact'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof ContactRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ContactRoute: ContactRoute,
  DestinationsRoute: DestinationsRoute,
  PricesRoute: PricesRoute,
  ServicesRoute: ServicesRoute,
  TermsRoute: TermsRoute,
  VehiclesRoute: VehiclesRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
